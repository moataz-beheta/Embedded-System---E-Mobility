
Timer 0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abd  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046d  00000000  00000000  0000235f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_10>
  2c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  74:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDirection>:


void	DIO_voidSetPinDirection(u8 Port ,u8 Pin , u8 Direction )	// this pin will be used as i/p or o/p
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_voidSetPinDirection+0x6>
  80:	72 c0       	rjmp	.+228    	; 0x166 <DIO_voidSetPinDirection+0xea>
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_voidSetPinDirection+0xc>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	a1 f5       	brne	.+104    	; 0xf4 <DIO_voidSetPinDirection+0x78>
		{
			switch(Port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_voidSetPinDirection+0x36>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_voidSetPinDirection+0x20>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_voidSetPinDirection+0x4c>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_voidSetPinDirection+0x62>
  9a:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,Pin);	break;
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_voidSetPinDirection+0x2c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_voidSetPinDirection+0x28>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,Pin);	break;
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinDirection+0x42>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinDirection+0x3e>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,Pin);	break;
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDirection+0x58>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDirection+0x54>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,Pin);	break;
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x6a>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
			}
		}
		else if (Direction == INPUT)
  f4:	41 11       	cpse	r20, r1
  f6:	37 c0       	rjmp	.+110    	; 0x166 <DIO_voidSetPinDirection+0xea>
		{
			switch(Port)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 f0       	breq	.+36     	; 0x120 <DIO_voidSetPinDirection+0xa4>
  fc:	28 f0       	brcs	.+10     	; 0x108 <DIO_voidSetPinDirection+0x8c>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	d9 f0       	breq	.+54     	; 0x138 <DIO_voidSetPinDirection+0xbc>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	29 f1       	breq	.+74     	; 0x150 <DIO_voidSetPinDirection+0xd4>
 106:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,Pin);	break;
 108:	2a b3       	in	r18, 0x1a	; 26
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinDirection+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinDirection+0x94>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,Pin);	break;
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0xac>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
 136:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,Pin);	break;
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPinDirection+0xc8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPinDirection+0xc4>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,Pin);	break;
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_voidSetPinDirection+0xe0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_voidSetPinDirection+0xdc>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_voidSetPinValue>:
	}
}
void	DIO_voidSetPinValue(u8 Port ,u8 Pin , u8 Value )	// this o/p will high or low
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	08 f0       	brcs	.+2      	; 0x16e <DIO_voidSetPinValue+0x6>
 16c:	72 c0       	rjmp	.+228    	; 0x252 <DIO_voidSetPinValue+0xea>
 16e:	68 30       	cpi	r22, 0x08	; 8
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_voidSetPinValue+0xc>
 172:	6f c0       	rjmp	.+222    	; 0x252 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	a1 f5       	brne	.+104    	; 0x1e0 <DIO_voidSetPinValue+0x78>
		{
			switch(Port)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	89 f0       	breq	.+34     	; 0x19e <DIO_voidSetPinValue+0x36>
 17c:	28 f0       	brcs	.+10     	; 0x188 <DIO_voidSetPinValue+0x20>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	c9 f0       	breq	.+50     	; 0x1b4 <DIO_voidSetPinValue+0x4c>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	11 f1       	breq	.+68     	; 0x1ca <DIO_voidSetPinValue+0x62>
 186:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,Pin);	break;
 188:	2b b3       	in	r18, 0x1b	; 27
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_voidSetPinValue+0x2c>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_voidSetPinValue+0x28>
 198:	82 2b       	or	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,Pin);	break;
 19e:	28 b3       	in	r18, 0x18	; 24
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_voidSetPinValue+0x42>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_voidSetPinValue+0x3e>
 1ae:	82 2b       	or	r24, r18
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,Pin);	break;
 1b4:	25 b3       	in	r18, 0x15	; 21
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_voidSetPinValue+0x58>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_voidSetPinValue+0x54>
 1c4:	82 2b       	or	r24, r18
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,Pin);	break;
 1ca:	22 b3       	in	r18, 0x12	; 18
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinValue+0x6e>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinValue+0x6a>
 1da:	82 2b       	or	r24, r18
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	08 95       	ret
			}
		}
		else if (Value == LOW)
 1e0:	41 11       	cpse	r20, r1
 1e2:	37 c0       	rjmp	.+110    	; 0x252 <DIO_voidSetPinValue+0xea>
		{
			switch(Port)
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	91 f0       	breq	.+36     	; 0x20c <DIO_voidSetPinValue+0xa4>
 1e8:	28 f0       	brcs	.+10     	; 0x1f4 <DIO_voidSetPinValue+0x8c>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	d9 f0       	breq	.+54     	; 0x224 <DIO_voidSetPinValue+0xbc>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	29 f1       	breq	.+74     	; 0x23c <DIO_voidSetPinValue+0xd4>
 1f2:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,Pin);	break;
 1f4:	2b b3       	in	r18, 0x1b	; 27
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_voidSetPinValue+0x98>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_voidSetPinValue+0x94>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	8b bb       	out	0x1b, r24	; 27
 20a:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,Pin);	break;
 20c:	28 b3       	in	r18, 0x18	; 24
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_voidSetPinValue+0xb0>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_voidSetPinValue+0xac>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	88 bb       	out	0x18, r24	; 24
 222:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,Pin);	break;
 224:	25 b3       	in	r18, 0x15	; 21
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0xc8>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0xc4>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,Pin);	break;
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinValue+0xe0>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinValue+0xdc>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <Toggle_Led>:
    }
}

void 	Toggle_Led	(void)
{
	if (count == 78)
 254:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
 258:	8e 34       	cpi	r24, 0x4E	; 78
 25a:	b1 f4       	brne	.+44     	; 0x288 <Toggle_Led+0x34>
	{
		static u8 flag = 0 ;
		if(flag == 0)
 25c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 260:	81 11       	cpse	r24, r1
 262:	09 c0       	rjmp	.+18     	; 0x276 <Toggle_Led+0x22>
		{
			DIO_voidSetPinValue(PORTC , PIN7 , HIGH);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	67 e0       	ldi	r22, 0x07	; 7
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
			flag = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 274:	07 c0       	rjmp	.+14     	; 0x284 <Toggle_Led+0x30>
		}
		else
		{
			DIO_voidSetPinValue(PORTC , PIN7 , LOW);
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	67 e0       	ldi	r22, 0x07	; 7
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
			flag = 0;
 280:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		count = 0;
 284:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count>
	}
	count++;
 288:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count>
 292:	08 95       	ret

00000294 <main>:

void 	Toggle_Led	(void);

int main(void)
{
		TIMER0_voidSetCallBackCTC(Toggle_Led);
 294:	8a e2       	ldi	r24, 0x2A	; 42
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 85 01 	call	0x30a	; 0x30a <TIMER0_voidSetCallBackCTC>
		GIE_voidEnable();
 29c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <GIE_voidEnable>
		Timer0_Init		();
 2a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <Timer0_Init>
		TIMER0_EnableCTCInt();
 2a4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <TIMER0_EnableCTCInt>
		TIMER0_SetTCNT0(0);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 81 01 	call	0x302	; 0x302 <TIMER0_SetTCNT0>
		TIMER0_SetOCR0(199);
 2ae:	87 ec       	ldi	r24, 0xC7	; 199
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 83 01 	call	0x306	; 0x306 <TIMER0_SetOCR0>
		TIMER0_EnableOverFlowInt();
 2b6:	0e 94 75 01 	call	0x2ea	; 0x2ea <TIMER0_EnableOverFlowInt>
		TIMER0_DisableOverFlowInt();
 2ba:	0e 94 7d 01 	call	0x2fa	; 0x2fa <TIMER0_DisableOverFlowInt>
		
		
		
		
		DIO_voidSetPinDirection(PORTC,PIN7,OUTPUT);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	67 e0       	ldi	r22, 0x07	; 7
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <main+0x34>

000002ca <Timer0_Init>:
}

/*	ISR SetCallBack Functions 		*/
void	TIMER0_voidSetCallBackOF(void (*PF)(void))
{
	OFCallBack_PF = PF;
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	83 bf       	out	0x33, r24	; 51
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	8f 7b       	andi	r24, 0xBF	; 191
 2d4:	83 bf       	out	0x33, r24	; 51
 2d6:	83 b7       	in	r24, 0x33	; 51
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	83 bf       	out	0x33, r24	; 51
 2dc:	83 b7       	in	r24, 0x33	; 51
 2de:	8d 7f       	andi	r24, 0xFD	; 253
 2e0:	83 bf       	out	0x33, r24	; 51
 2e2:	83 b7       	in	r24, 0x33	; 51
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	83 bf       	out	0x33, r24	; 51
 2e8:	08 95       	ret

000002ea <TIMER0_EnableOverFlowInt>:
 2ea:	89 b7       	in	r24, 0x39	; 57
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	89 bf       	out	0x39, r24	; 57
 2f0:	08 95       	ret

000002f2 <TIMER0_EnableCTCInt>:
 2f2:	89 b7       	in	r24, 0x39	; 57
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	89 bf       	out	0x39, r24	; 57
 2f8:	08 95       	ret

000002fa <TIMER0_DisableOverFlowInt>:
 2fa:	89 b7       	in	r24, 0x39	; 57
 2fc:	8e 7f       	andi	r24, 0xFE	; 254
 2fe:	89 bf       	out	0x39, r24	; 57
 300:	08 95       	ret

00000302 <TIMER0_SetTCNT0>:
 302:	82 bf       	out	0x32, r24	; 50
 304:	08 95       	ret

00000306 <TIMER0_SetOCR0>:
 306:	8c bf       	out	0x3c, r24	; 60
 308:	08 95       	ret

0000030a <TIMER0_voidSetCallBackCTC>:
}
void	TIMER0_voidSetCallBackCTC(void (*PF)(void))
{
	CTCCallBack_PF = PF ;
 30a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <CTCCallBack_PF+0x1>
 30e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <CTCCallBack_PF>
 312:	08 95       	ret

00000314 <__vector_10>:
}

/*	ISR Functions For Timer0 Compare Match & Overflow Interrupts 		*/
void	__vector_10 (void) //Timer0 Compare Match Interrupt
{
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	CTCCallBack_PF();
 336:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <CTCCallBack_PF>
 33a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <CTCCallBack_PF+0x1>
 33e:	09 95       	icall
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_11>:
void	__vector_11 (void) //Timer0 Overflow Interrupt
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	OFCallBack_PF();
 384:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <OFCallBack_PF>
 388:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <OFCallBack_PF+0x1>
 38c:	09 95       	icall
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <GIE_voidEnable>:

/*		Global Interrupts Enable and Disable	*/
void GIE_voidEnable(void)
{
	SET_BIT(SREG,7);
 3b0:	8f b7       	in	r24, 0x3f	; 63
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	8f bf       	out	0x3f, r24	; 63
 3b6:	08 95       	ret

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
