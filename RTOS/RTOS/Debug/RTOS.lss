
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c6  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000627  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000138  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED1>:
#define			F_CPU			16000000UL

/*  				Toggle LEDs				*/
void 		LED1  	(void)
{
	PORTC ^=(1<<2);
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	89 27       	eor	r24, r25
  82:	85 bb       	out	0x15, r24	; 21
  84:	08 95       	ret

00000086 <LED2>:
}

void 		LED2  	(void)
{
	PORTC ^=(1<<7);
  86:	85 b3       	in	r24, 0x15	; 21
  88:	80 58       	subi	r24, 0x80	; 128
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret

0000008e <LED3>:
}

void 		LED3  	(void)
{
	PORTD ^=(1<<3);
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	89 27       	eor	r24, r25
  94:	82 bb       	out	0x12, r24	; 18
  96:	08 95       	ret

00000098 <RTO_voidScheduler>:
	Tasks[Task_ID].u16_FirstDelay = First_Delay;
}

/* 			Scheduler API 					*/
static void RTO_voidScheduler(void)
{
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	for(int i = 0; i < NUM_OF_TASKS; i++)
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	20 c0       	rjmp	.+64     	; 0xe6 <RTO_voidScheduler+0x4e>
	{
		if((RTO_u16Ticks % ((Tasks[i].u16_periodicity)+(Tasks[i].u16_FirstDelay))) == 0)
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ae:	fe 01       	movw	r30, r28
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	ec 0f       	add	r30, r28
  b6:	fd 1f       	adc	r31, r29
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ee 59       	subi	r30, 0x9E	; 158
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	60 81       	ld	r22, Z
  c2:	71 81       	ldd	r23, Z+1	; 0x01
  c4:	24 81       	ldd	r18, Z+4	; 0x04
  c6:	35 81       	ldd	r19, Z+5	; 0x05
  c8:	62 0f       	add	r22, r18
  ca:	73 1f       	adc	r23, r19
  cc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodhi4>
  d0:	89 2b       	or	r24, r25
  d2:	41 f4       	brne	.+16     	; 0xe4 <RTO_voidScheduler+0x4c>
		{
			Tasks[i].PfTask();
  d4:	8f 01       	movw	r16, r30
  d6:	02 80       	ldd	r0, Z+2	; 0x02
  d8:	f3 81       	ldd	r31, Z+3	; 0x03
  da:	e0 2d       	mov	r30, r0
  dc:	09 95       	icall
			Tasks[i].u16_FirstDelay=0;
  de:	f8 01       	movw	r30, r16
  e0:	15 82       	std	Z+5, r1	; 0x05
  e2:	14 82       	std	Z+4, r1	; 0x04
}

/* 			Scheduler API 					*/
static void RTO_voidScheduler(void)
{
	for(int i = 0; i < NUM_OF_TASKS; i++)
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	c3 30       	cpi	r28, 0x03	; 3
  e8:	d1 05       	cpc	r29, r1
  ea:	ec f2       	brlt	.-70     	; 0xa6 <RTO_voidScheduler+0xe>
		{
			Tasks[i].PfTask();
			Tasks[i].u16_FirstDelay=0;
		}
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <RTO_voidCreateTask>:

TCB_Tasks 		Tasks[NUM_OF_TASKS] ;

void		RTO_voidCreateTask(u8 Task_ID , u16 Periodicity , void  (*pf)(void), u16 First_Delay)
{
	Tasks[Task_ID].u16_periodicity = Periodicity;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	df 01       	movw	r26, r30
 100:	a8 0f       	add	r26, r24
 102:	b9 1f       	adc	r27, r25
 104:	aa 0f       	add	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	ae 59       	subi	r26, 0x9E	; 158
 10a:	bf 4f       	sbci	r27, 0xFF	; 255
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	7c 93       	st	X, r23
 110:	6e 93       	st	-X, r22
	Tasks[Task_ID].PfTask = pf;
 112:	13 96       	adiw	r26, 0x03	; 3
 114:	5c 93       	st	X, r21
 116:	4e 93       	st	-X, r20
 118:	12 97       	sbiw	r26, 0x02	; 2
	Tasks[Task_ID].u16_FirstDelay = First_Delay;
 11a:	fd 01       	movw	r30, r26
 11c:	35 83       	std	Z+5, r19	; 0x05
 11e:	24 83       	std	Z+4, r18	; 0x04
 120:	08 95       	ret

00000122 <__vector_11>:
}


/* 			Tick Time ====> Timer0 			*/
ISR(TIMER0_OVF_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	TCNT0 = 6;
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	82 bf       	out	0x32, r24	; 50
	RTO_u16Ticks++;
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	RTO_voidScheduler();
 15a:	0e 94 4c 00 	call	0x98	; 0x98 <RTO_voidScheduler>
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <main>:


int main()
{
	/*			Direction 	 									*/
	DDRC = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 184:	81 bb       	out	0x11, r24	; 17
	/*			Timer Configuration to get overflow at 1ms			*/
	TCNT0 = 6;
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	82 bf       	out	0x32, r24	; 50
	/* 			Normal  Modem ,   Pre = 64							*/
	TCCR0 = 0x03 ;
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TIMSK,0);
 18e:	89 b7       	in	r24, 0x39	; 57
 190:	81 60       	ori	r24, 0x01	; 1
 192:	89 bf       	out	0x39, r24	; 57
	SET_BIT(SREG ,7);
 194:	8f b7       	in	r24, 0x3f	; 63
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8f bf       	out	0x3f, r24	; 63
	/* 			Create Task										*/
	RTO_voidCreateTask(0,1000,LED1,0);
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	4e e3       	ldi	r20, 0x3E	; 62
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	68 ee       	ldi	r22, 0xE8	; 232
 1a4:	73 e0       	ldi	r23, 0x03	; 3
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 7b 00 	call	0xf6	; 0xf6 <RTO_voidCreateTask>
	RTO_voidCreateTask(1,2000,LED2,1000);
 1ac:	28 ee       	ldi	r18, 0xE8	; 232
 1ae:	33 e0       	ldi	r19, 0x03	; 3
 1b0:	43 e4       	ldi	r20, 0x43	; 67
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	60 ed       	ldi	r22, 0xD0	; 208
 1b6:	77 e0       	ldi	r23, 0x07	; 7
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <RTO_voidCreateTask>
	RTO_voidCreateTask(2,3000,LED3,2000);
 1be:	20 ed       	ldi	r18, 0xD0	; 208
 1c0:	37 e0       	ldi	r19, 0x07	; 7
 1c2:	47 e4       	ldi	r20, 0x47	; 71
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	68 eb       	ldi	r22, 0xB8	; 184
 1c8:	7b e0       	ldi	r23, 0x0B	; 11
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 7b 00 	call	0xf6	; 0xf6 <RTO_voidCreateTask>
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <main+0x50>

000001d2 <__udivmodhi4>:
 1d2:	aa 1b       	sub	r26, r26
 1d4:	bb 1b       	sub	r27, r27
 1d6:	51 e1       	ldi	r21, 0x11	; 17
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <__udivmodhi4_ep>

000001da <__udivmodhi4_loop>:
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	a6 17       	cp	r26, r22
 1e0:	b7 07       	cpc	r27, r23
 1e2:	10 f0       	brcs	.+4      	; 0x1e8 <__udivmodhi4_ep>
 1e4:	a6 1b       	sub	r26, r22
 1e6:	b7 0b       	sbc	r27, r23

000001e8 <__udivmodhi4_ep>:
 1e8:	88 1f       	adc	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	5a 95       	dec	r21
 1ee:	a9 f7       	brne	.-22     	; 0x1da <__udivmodhi4_loop>
 1f0:	80 95       	com	r24
 1f2:	90 95       	com	r25
 1f4:	bc 01       	movw	r22, r24
 1f6:	cd 01       	movw	r24, r26
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
