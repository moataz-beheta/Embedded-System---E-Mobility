
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d04  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000764  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b0  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ff  00000000  00000000  00002625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
  74:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
		/*	Read The Conversion Value	*/
		*result = ADC;

		return ErrorStatus;	
	}
}
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	86 b9       	out	0x06, r24	; 6
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 77       	andi	r24, 0x7F	; 127
  8c:	87 b9       	out	0x07, r24	; 7
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	81 60       	ori	r24, 0x01	; 1
  92:	86 b9       	out	0x06, r24	; 6
  94:	86 b1       	in	r24, 0x06	; 6
  96:	82 60       	ori	r24, 0x02	; 2
  98:	86 b9       	out	0x06, r24	; 6
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	08 95       	ret

000000a2 <ADC_StartConvASyn>:

ADC_ERROR_STATUS	ADC_StartConvASyn	(u8 Channel, u16 *result, void(*ptrfun)(void))
{
	u8 ErrorStatus = OK;
	if ((ptrfun == NULL) || (result == NULL) || (Channel>7))
  a2:	41 15       	cp	r20, r1
  a4:	51 05       	cpc	r21, r1
  a6:	39 f0       	breq	.+14     	; 0xb6 <ADC_StartConvASyn+0x14>
  a8:	61 15       	cp	r22, r1
  aa:	71 05       	cpc	r23, r1
  ac:	31 f0       	breq	.+12     	; 0xba <ADC_StartConvASyn+0x18>
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	30 f4       	brcc	.+12     	; 0xbe <ADC_StartConvASyn+0x1c>
	}
}

ADC_ERROR_STATUS	ADC_StartConvASyn	(u8 Channel, u16 *result, void(*ptrfun)(void))
{
	u8 ErrorStatus = OK;
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <ADC_StartConvASyn+0x1e>
	if ((ptrfun == NULL) || (result == NULL) || (Channel>7))
	{
		ErrorStatus = NOK;	
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <ADC_StartConvASyn+0x1e>
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <ADC_StartConvASyn+0x1e>
  be:	21 e0       	ldi	r18, 0x01	; 1
	}
	
	if (Status==IDLE)
  c0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	91 11       	cpse	r25, r1
  c6:	14 c0       	rjmp	.+40     	; 0xf0 <ADC_StartConvASyn+0x4e>
	{
		Status = BUSY;
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
		ADC_Result = result;
  ce:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <ADC_Result+0x1>
  d2:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <ADC_Result>
		ADC_END_OF_JOB = ptrfun;
  d6:	50 93 64 00 	sts	0x0064, r21	; 0x800064 <ADC_END_OF_JOB+0x1>
  da:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <ADC_END_OF_JOB>
		
		ADMUX |= Channel;
  de:	97 b1       	in	r25, 0x07	; 7
  e0:	98 2b       	or	r25, r24
  e2:	97 b9       	out	0x07, r25	; 7
		
		/*	Interrupt Enable 			*/
		SET_BIT(ADCSRA,3);
  e4:	96 b1       	in	r25, 0x06	; 6
  e6:	98 60       	ori	r25, 0x08	; 8
  e8:	96 b9       	out	0x06, r25	; 6
		
		/*	Start Single Conversion		*/
		SET_BIT(ADCSRA,6);
  ea:	96 b1       	in	r25, 0x06	; 6
  ec:	90 64       	ori	r25, 0x40	; 64
  ee:	96 b9       	out	0x06, r25	; 6
	}	
	return ErrorStatus;
}
  f0:	82 2f       	mov	r24, r18
  f2:	08 95       	ret

000000f4 <__vector_16>:

void	__vector_16 (void) //ADC Conversion Complete
{ 
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	*ADC_Result = ADC;
 116:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <ADC_Result>
 11a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <ADC_Result+0x1>
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	95 b1       	in	r25, 0x05	; 5
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
	ADC_END_OF_JOB(); //ADCCallBack_PF
 126:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ADC_END_OF_JOB>
 12a:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ADC_END_OF_JOB+0x1>
 12e:	09 95       	icall
	Status = IDLE;
 130:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <GIE_voidEnable>:

void GIE_voidEnable(void)
{
	SET_BIT(SREG,7);
 156:	8f b7       	in	r24, 0x3f	; 63
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	8f bf       	out	0x3f, r24	; 63
 15c:	08 95       	ret

0000015e <DIO_voidSetPinDirection>:


void	DIO_voidSetPinDirection(u8 Port ,u8 Pin , u8 Direction )
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_voidSetPinDirection+0x6>
 162:	72 c0       	rjmp	.+228    	; 0x248 <DIO_voidSetPinDirection+0xea>
 164:	68 30       	cpi	r22, 0x08	; 8
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_voidSetPinDirection+0xc>
 168:	6f c0       	rjmp	.+222    	; 0x248 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	a1 f5       	brne	.+104    	; 0x1d6 <DIO_voidSetPinDirection+0x78>
		{
			switch(Port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_voidSetPinDirection+0x36>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_voidSetPinDirection+0x20>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_voidSetPinDirection+0x4c>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_voidSetPinDirection+0x62>
 17c:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,Pin);	break;
 17e:	2a b3       	in	r18, 0x1a	; 26
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_voidSetPinDirection+0x2c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_voidSetPinDirection+0x28>
 18e:	82 2b       	or	r24, r18
 190:	8a bb       	out	0x1a, r24	; 26
 192:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,Pin);	break;
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_voidSetPinDirection+0x42>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_voidSetPinDirection+0x3e>
 1a4:	82 2b       	or	r24, r18
 1a6:	87 bb       	out	0x17, r24	; 23
 1a8:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,Pin);	break;
 1aa:	24 b3       	in	r18, 0x14	; 20
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_voidSetPinDirection+0x58>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_voidSetPinDirection+0x54>
 1ba:	82 2b       	or	r24, r18
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,Pin);	break;
 1c0:	21 b3       	in	r18, 0x11	; 17
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_voidSetPinDirection+0x6e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_voidSetPinDirection+0x6a>
 1d0:	82 2b       	or	r24, r18
 1d2:	81 bb       	out	0x11, r24	; 17
 1d4:	08 95       	ret
			}
		}
		else if (Direction == INPUT)
 1d6:	41 11       	cpse	r20, r1
 1d8:	37 c0       	rjmp	.+110    	; 0x248 <DIO_voidSetPinDirection+0xea>
		{
			switch(Port)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 f0       	breq	.+36     	; 0x202 <DIO_voidSetPinDirection+0xa4>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <DIO_voidSetPinDirection+0x8c>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	d9 f0       	breq	.+54     	; 0x21a <DIO_voidSetPinDirection+0xbc>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	29 f1       	breq	.+74     	; 0x232 <DIO_voidSetPinDirection+0xd4>
 1e8:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,Pin);	break;
 1ea:	2a b3       	in	r18, 0x1a	; 26
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_voidSetPinDirection+0x98>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_voidSetPinDirection+0x94>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	8a bb       	out	0x1a, r24	; 26
 200:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,Pin);	break;
 202:	27 b3       	in	r18, 0x17	; 23
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_voidSetPinDirection+0xb0>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_voidSetPinDirection+0xac>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	87 bb       	out	0x17, r24	; 23
 218:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,Pin);	break;
 21a:	24 b3       	in	r18, 0x14	; 20
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_voidSetPinDirection+0xc8>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_voidSetPinDirection+0xc4>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	84 bb       	out	0x14, r24	; 20
 230:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,Pin);	break;
 232:	21 b3       	in	r18, 0x11	; 17
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_voidSetPinDirection+0xe0>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_voidSetPinDirection+0xdc>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	81 bb       	out	0x11, r24	; 17
 248:	08 95       	ret

0000024a <DIO_voidSetPinValue>:
	}
}
void	DIO_voidSetPinValue(u8 Port ,u8 Pin , u8 Value )
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
 24a:	84 30       	cpi	r24, 0x04	; 4
 24c:	08 f0       	brcs	.+2      	; 0x250 <DIO_voidSetPinValue+0x6>
 24e:	72 c0       	rjmp	.+228    	; 0x334 <DIO_voidSetPinValue+0xea>
 250:	68 30       	cpi	r22, 0x08	; 8
 252:	08 f0       	brcs	.+2      	; 0x256 <DIO_voidSetPinValue+0xc>
 254:	6f c0       	rjmp	.+222    	; 0x334 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	a1 f5       	brne	.+104    	; 0x2c2 <DIO_voidSetPinValue+0x78>
		{
			switch(Port)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	89 f0       	breq	.+34     	; 0x280 <DIO_voidSetPinValue+0x36>
 25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_voidSetPinValue+0x20>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	c9 f0       	breq	.+50     	; 0x296 <DIO_voidSetPinValue+0x4c>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	11 f1       	breq	.+68     	; 0x2ac <DIO_voidSetPinValue+0x62>
 268:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,Pin);	break;
 26a:	2b b3       	in	r18, 0x1b	; 27
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_voidSetPinValue+0x2c>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_voidSetPinValue+0x28>
 27a:	82 2b       	or	r24, r18
 27c:	8b bb       	out	0x1b, r24	; 27
 27e:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,Pin);	break;
 280:	28 b3       	in	r18, 0x18	; 24
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_voidSetPinValue+0x42>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_voidSetPinValue+0x3e>
 290:	82 2b       	or	r24, r18
 292:	88 bb       	out	0x18, r24	; 24
 294:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,Pin);	break;
 296:	25 b3       	in	r18, 0x15	; 21
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_voidSetPinValue+0x58>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_voidSetPinValue+0x54>
 2a6:	82 2b       	or	r24, r18
 2a8:	85 bb       	out	0x15, r24	; 21
 2aa:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,Pin);	break;
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_voidSetPinValue+0x6e>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_voidSetPinValue+0x6a>
 2bc:	82 2b       	or	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
 2c0:	08 95       	ret
			}
		}
		else if (Value == LOW)
 2c2:	41 11       	cpse	r20, r1
 2c4:	37 c0       	rjmp	.+110    	; 0x334 <DIO_voidSetPinValue+0xea>
		{
			switch(Port)
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	91 f0       	breq	.+36     	; 0x2ee <DIO_voidSetPinValue+0xa4>
 2ca:	28 f0       	brcs	.+10     	; 0x2d6 <DIO_voidSetPinValue+0x8c>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	d9 f0       	breq	.+54     	; 0x306 <DIO_voidSetPinValue+0xbc>
 2d0:	83 30       	cpi	r24, 0x03	; 3
 2d2:	29 f1       	breq	.+74     	; 0x31e <DIO_voidSetPinValue+0xd4>
 2d4:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,Pin);	break;
 2d6:	2b b3       	in	r18, 0x1b	; 27
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_voidSetPinValue+0x98>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_voidSetPinValue+0x94>
 2e6:	80 95       	com	r24
 2e8:	82 23       	and	r24, r18
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,Pin);	break;
 2ee:	28 b3       	in	r18, 0x18	; 24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_voidSetPinValue+0xb0>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_voidSetPinValue+0xac>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	88 bb       	out	0x18, r24	; 24
 304:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,Pin);	break;
 306:	25 b3       	in	r18, 0x15	; 21
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_voidSetPinValue+0xc8>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_voidSetPinValue+0xc4>
 316:	80 95       	com	r24
 318:	82 23       	and	r24, r18
 31a:	85 bb       	out	0x15, r24	; 21
 31c:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,Pin);	break;
 31e:	22 b3       	in	r18, 0x12	; 18
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPinValue+0xe0>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPinValue+0xdc>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	82 bb       	out	0x12, r24	; 18
 334:	08 95       	ret

00000336 <LED_ON>:
		DIO_voidSetPinValue(PORTC,PIN7,HIGH);	//led1
		DIO_voidSetPinValue(PORTD,PIN3,HIGH);	//led2
}
void LED_ON(void)
{
	u16 Local_Analog_Value = (Local_Digital_Value*5000UL)/1024;
 336:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <Local_Digital_Value>
 33a:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Local_Digital_Value+0x1>
 33e:	a8 e8       	ldi	r26, 0x88	; 136
 340:	b3 e1       	ldi	r27, 0x13	; 19
 342:	0e 94 2b 02 	call	0x456	; 0x456 <__umulhisi3>
 346:	dc 01       	movw	r26, r24
 348:	cb 01       	movw	r24, r22
 34a:	07 2e       	mov	r0, r23
 34c:	7a e0       	ldi	r23, 0x0A	; 10
 34e:	b6 95       	lsr	r27
 350:	a7 95       	ror	r26
 352:	97 95       	ror	r25
 354:	87 95       	ror	r24
 356:	7a 95       	dec	r23
 358:	d1 f7       	brne	.-12     	; 0x34e <LED_ON+0x18>
 35a:	70 2d       	mov	r23, r0
	if (Local_Analog_Value <=1000) //1000mV
 35c:	89 3e       	cpi	r24, 0xE9	; 233
 35e:	23 e0       	ldi	r18, 0x03	; 3
 360:	92 07       	cpc	r25, r18
 362:	80 f4       	brcc	.+32     	; 0x384 <LED_ON+0x4e>
	{
		DIO_voidSetPinValue(PORTC,PIN2,HIGH);	//led0
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTC,PIN7,LOW);	//led1
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	67 e0       	ldi	r22, 0x07	; 7
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTD,PIN3,LOW);	//led2
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
 382:	08 95       	ret
	}
	
	else if (Local_Analog_Value <=4000 && Local_Analog_Value >1000 )
 384:	bc 01       	movw	r22, r24
 386:	69 5e       	subi	r22, 0xE9	; 233
 388:	73 40       	sbci	r23, 0x03	; 3
 38a:	68 3b       	cpi	r22, 0xB8	; 184
 38c:	7b 40       	sbci	r23, 0x0B	; 11
 38e:	80 f4       	brcc	.+32     	; 0x3b0 <LED_ON+0x7a>
	{
		DIO_voidSetPinValue(PORTC,PIN2,LOW);	//led0
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTC,PIN7,HIGH);	//led1
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTD,PIN3,HIGH);	//led2
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
 3ae:	08 95       	ret
	}

	else
	{
		DIO_voidSetPinValue(PORTC,PIN2,HIGH);	//led0
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTC,PIN7,LOW);	//led1
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTD,PIN3,HIGH);	//led2
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
 3ce:	08 95       	ret

000003d0 <main>:
void LED_ON(void);
u16	Local_Digital_Value=0;

int main(void)
{
	GIE_voidEnable	();
 3d0:	0e 94 ab 00 	call	0x156	; 0x156 <GIE_voidEnable>
	ADC_Init		();
 3d4:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
	
	
	u8 Status;
	DIO_voidSetPinDirection(PORTC,PIN2,OUTPUT);	//led0
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN7,OUTPUT);	//led1
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	67 e0       	ldi	r22, 0x07	; 7
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN3,OUTPUT);	//led2
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	63 e0       	ldi	r22, 0x03	; 3
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN0,OUTPUT);	//Error_LED
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_voidSetPinDirection>
	
	DIO_voidSetPinValue(PORTC,PIN2,LOW);
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,PIN7,LOW);
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	67 e0       	ldi	r22, 0x07	; 7
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,PIN3,LOW);
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,PIN0,LOW);
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
    /* Replace with your application code */
    while (1) 
    {
		
				//ASynchronous Function
				Status=	ADC_StartConvASyn	(ADC7, &Local_Digital_Value,  LED_ON);
 428:	4b e9       	ldi	r20, 0x9B	; 155
 42a:	51 e0       	ldi	r21, 0x01	; 1
 42c:	61 e6       	ldi	r22, 0x61	; 97
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	87 e0       	ldi	r24, 0x07	; 7
 432:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_StartConvASyn>
				if (Status == OK)
 436:	81 11       	cpse	r24, r1
 438:	06 c0       	rjmp	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				{
					DIO_voidSetPinValue(PORTC,PIN0,LOW);
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
 444:	f1 cf       	rjmp	.-30     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				}
				else if (Status == NOK)
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	79 f7       	brne	.-34     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				{
					DIO_voidSetPinValue(PORTC,PIN0,HIGH);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_voidSetPinValue>
 454:	e9 cf       	rjmp	.-46     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>

00000456 <__umulhisi3>:
 456:	a2 9f       	mul	r26, r18
 458:	b0 01       	movw	r22, r0
 45a:	b3 9f       	mul	r27, r19
 45c:	c0 01       	movw	r24, r0
 45e:	a3 9f       	mul	r26, r19
 460:	70 0d       	add	r23, r0
 462:	81 1d       	adc	r24, r1
 464:	11 24       	eor	r1, r1
 466:	91 1d       	adc	r25, r1
 468:	b2 9f       	mul	r27, r18
 46a:	70 0d       	add	r23, r0
 46c:	81 1d       	adc	r24, r1
 46e:	11 24       	eor	r1, r1
 470:	91 1d       	adc	r25, r1
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
